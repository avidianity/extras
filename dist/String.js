"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _dayjs = _interopRequireDefault(require("dayjs"));

var _relativeTime = _interopRequireDefault(require("dayjs/plugin/relativeTime"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

_dayjs["default"].extend(_relativeTime["default"]);

var errors = [];

if (typeof String.prototype.toNumber === 'undefined') {
  Object.defineProperty(String.prototype, 'toNumber', {
    enumerable: false,
    configurable: false,
    writable: false,
    value: function value() {
      var parts = this.split('.');

      if (parts.length > 1) {
        var whole = (parts[0].match(/\d/g) || []).join('');
        var decimals = (parts[1].match(/\d/g) || []).join('');
        return Number("".concat(whole, ".").concat(decimals)) || 0;
      }

      var match = this.match(/\d/g);

      if (!match) {
        return 0;
      }

      return Number(match.join('')) || 0;
    }
  });
} else {
  errors.push('toNumber');
}

if (typeof String.prototype.toDayJS === 'undefined') {
  Object.defineProperty(String.prototype, 'toDayJS', {
    enumerable: false,
    configurable: false,
    writable: false,
    value: function value() {
      var instance = (0, _dayjs["default"])(this.toString());

      if (!instance.isValid()) {
        throw new Error('Invalid Date');
      }

      return instance;
    }
  });
} else {
  errors.push('toDayJS');
}

if (typeof String.prototype.toDate === 'undefined') {
  Object.defineProperty(String.prototype, 'toDate', {
    enumerable: false,
    configurable: false,
    writable: false,
    value: function value() {
      var instance = (0, _dayjs["default"])(this.toString());

      if (!instance.isValid()) {
        throw new Error('Invalid Date');
      }

      return instance.toDate();
    }
  });
} else {
  errors.push('toDate');
}

if (typeof String.prototype.fromNow === 'undefined') {
  Object.defineProperty(String.prototype, 'fromNow', {
    enumerable: false,
    configurable: false,
    writable: false,
    value: function value() {
      var instance = (0, _dayjs["default"])(this.toString());

      if (!instance.isValid()) {
        throw new Error('Invalid Date');
      }

      return instance.fromNow();
    }
  });
} else {
  errors.push('fromNow');
}

if (typeof String.random === 'undefined') {
  Object.defineProperty(String, 'random', {
    enumerable: false,
    configurable: false,
    writable: false,
    value: function value(size) {
      var characters = '1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM';
      var results = '';

      for (var x = 0; x < size; x++) {
        results += characters.charAt(Math.floor(Math.random() * characters.length));
      }

      return results;
    }
  });
} else {
  errors.push('random');
}

if (typeof String.prototype.ucfirst === 'undefined') {
  Object.defineProperty(String.prototype, 'ucfirst', {
    enumerable: false,
    configurable: false,
    writable: false,
    value: function value() {
      var fragments = this.split('');

      if (fragments.length > 0) {
        fragments[0] = fragments[0].toUpperCase();
      }

      return fragments.join('');
    }
  });
} else {
  errors.push('ucfirst');
}

if (typeof String.prototype.ucwords === 'undefined') {
  Object.defineProperty(String.prototype, 'ucwords', {
    enumerable: false,
    configurable: false,
    writable: false,
    value: function value() {
      return this.split(' ').map(function (string) {
        var fragments = string.split('');

        if (fragments.length > 0) {
          fragments[0] = fragments[0].toUpperCase();
        }

        return fragments.join('');
      }).join(' ');
    }
  });
} else {
  errors.push('ucwords');
}

if (errors.length > 0) {
  console.error("@avidian/extras:String: Unable to patch the following methods - ".concat(errors.join(', ')));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,