"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.except = except;
exports.only = only;

var _lodash = require("lodash");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var errors = [];

if (typeof Array.prototype.random === 'undefined') {
  Object.defineProperty(Array.prototype, 'random', {
    enumerable: false,
    configurable: false,
    writable: false,
    value: function value() {
      return this[Math.floor(Math.random() * this.length)];
    }
  });
} else {
  errors.push('random');
}

if (typeof Array.prototype.limit === 'undefined') {
  Object.defineProperty(Array.prototype, 'limit', {
    enumerable: false,
    configurable: false,
    writable: false,
    value: function value(length) {
      if (this.length > length) {
        this.length = length;
      }

      return this;
    }
  });
} else {
  errors.push('limit');
}

if (typeof Array.prototype.first === 'undefined') {
  Object.defineProperty(Array.prototype, 'first', {
    enumerable: false,
    configurable: false,
    writable: false,
    value: function value() {
      if (this.length > 0) {
        return this[0];
      }

      return null;
    }
  });
} else {
  errors.push('first');
}

if (typeof Array.prototype.last === 'undefined') {
  Object.defineProperty(Array.prototype, 'last', {
    enumerable: false,
    configurable: false,
    writable: false,
    value: function value() {
      if (this.length > 0) {
        return this[this.length - 1];
      }

      return null;
    }
  });
} else {
  errors.push('last');
}

if (typeof Array.prototype.flatten === 'undefined') {
  Object.defineProperty(Array.prototype, 'flatten', {
    enumerable: false,
    configurable: false,
    writable: false,
    value: function value() {
      return (0, _lodash.flattenDeep)(this);
    }
  });
} else {
  errors.push('flatten');
}

if (typeof Array.prototype.groupBy === 'undefined') {
  Object.defineProperty(Array.prototype, 'groupBy', {
    enumerable: false,
    configurable: false,
    writable: false,
    value: function value(key) {
      var temp = {};
      this.forEach(function (item) {
        var property = item[key];

        if (!(property in temp)) {
          temp[property] = [];
        }

        temp[property].push(item);
      });
      return Object.keys(temp).map(function (key) {
        return temp[key];
      });
    }
  });
} else {
  errors.push('groupBy');
}

function except(item, keys) {
  var copy = {};

  for (var _key in item) {
    if (!keys.includes(_key)) {
      copy[_key] = item[_key];
    }
  }

  return copy;
}

function only(item, keys) {
  var copy = {};

  for (var _key2 in item) {
    if (keys.includes(_key2)) {
      copy[_key2] = item[_key2];
    }
  }

  return copy;
}

if (typeof Array.prototype.except === 'undefined') {
  Object.defineProperty(Array.prototype, 'except', {
    enumerable: false,
    configurable: false,
    writable: false,
    value: function value(keys) {
      return _toConsumableArray(this).map(function (item) {
        return except(item, keys);
      });
    }
  });
} else {
  errors.push('except');
}

if (typeof Array.prototype.only === 'undefined') {
  Object.defineProperty(Array.prototype, 'only', {
    enumerable: false,
    configurable: false,
    writable: false,
    value: function value(keys) {
      return _toConsumableArray(this).map(function (item) {
        return only(item, keys);
      });
    }
  });
} else {
  errors.push('only');
}

if (typeof Array.prototype.has === 'undefined') {
  Object.defineProperty(Array.prototype, 'has', {
    enumerable: false,
    configurable: false,
    writable: false,
    value: function value(predicate) {
      for (var _key3 in this) {
        var _item = this[_key3];

        if (predicate(_item, _key3, this)) {
          return true;
        }
      }

      return false;
    }
  });
} else {
  errors.push('has');
}

if (errors.length > 0) {
  console.error("@avidian/extras:Array: Unable to patch the following methods - ".concat(errors.join(', ')));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,